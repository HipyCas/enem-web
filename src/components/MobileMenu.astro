---
import MobileLinks from "./MobileLinks.vue";

interface Props {
  toggleClass?: string;
  // links: [string, string | [string, string][]][];
  links: any[];
}

const { toggleClass, links } = Astro.props;
---

<>
  <span
    id="mobileMenuToggle"
    class:list={[
      "i-tabler-menu-2 h-6 w-6 text-dark dark:text-clear px-8 cursor-pointer",
      toggleClass,
    ]}></span>

  <nav id="mobileMenuOverlay" class="z-10 bg-white dark:bg-dark">
    <MobileLinks links={links} Astro={Astro} />

    <div class="flex flex-row justify-evenly">
      <a
        href="mailto:enem2025@anem.es"
        aria-label="Correo electrÃ³nico"
        class="text-dark dark:text-clear"
        target="_blank"
      >
        <i class="i-tabler-mail"></i>
      </a>
      <a
        href="https://instagram.com/enem.mat"
        aria-label="Instagram"
        class="text-dark dark:text-clear"
        target="_blank"
      >
        <i class="inline-block text-lg i-tabler-brand-instagram"></i>
      </a>
      <a
        href="https://x.com/enem_mat"
        aria-label="Twitter / X"
        class="text-dark dark:text-clear"
        target="_blank"
      >
        <i class="inline-block text-lg i-tabler-brand-twitter"></i>
      </a>
    </div>
  </nav>
</>

<style scoped>
  #mobileMenuOverlay {
    /* display: none; */
    transform: translateX(100vw);

    pointer-events: all;

    position: fixed;
    inset: 0;
    top: var(--header-height);

    height: calc(100vh - var(--header-height));
    height: calc(100dvh - var(--header-height));
    z-index: 9999;

    /* used on close, when leaving screen */
    transition:
      transform 350ms ease-in,
      toDisplayNone 350ms linear;
  }

  /* TODO Better implement this, rn value is hardcoded  */
  @media (min-width: 1024px) {
    #mobileMenuOverlay {
      /* Ensures that when resized the overlay goes away */
      transform: translateX(100vw) !important;
      /* Ensures that the overlay doesn't show  up on sizes greater than mobile */
      display: none !important;
    }
  }

  #mobileMenuOverlay[data-open] {
    /* display: block; */
    /* transform: translateX(min(0, calc(100vw - 640px))); */
    transform: translate(0);

    /* used on open, when entering */
    transition: transform 350ms ease-out;
  }

  /* #mobileMenuOverlay ul {
    @apply pt-2;
  } */

  #mobileMenuOverlay a {
    @apply block px-6 py-4 text-xl;
  }
  /* 
  #mobileMenuOverlay a.active {
    @apply text-secondary underline decoration-2 underline-offset-4
  }  */
</style>

<script is:inline>
  document.addEventListener("DOMContentLoaded", () => {
    const toggle = document.getElementById("mobileMenuToggle");
    const overlay = document.getElementById("mobileMenuOverlay");
    const searchOverlay = document.getElementById("search-modal");
    const body = document.body;

    // TODO Hide search modal if open
    toggle.onclick = () => {
      overlay.toggleAttribute("data-open");
      overlay.toggleAttribute("aria-hidden");
      body.toggleAttribute("data-overlay-open");
      // if (document.body.scroll = "yes") {
      //   // document.documentElement.style.overflow = 'hidden';
      //   document.body.scroll = "no";
      // } else {
      //   // document.documentElement.style.overflow = 'initial';
      //   document.body.scroll = "yes";
      // }
      if (
        searchOverlay.hasAttribute("data-open") &&
        overlay.hasAttribute("data-open")
      ) {
        searchOverlay.removeAttribute("data-open");
      }
    };

    // Link dropdowns
    const mobileDropdowns = document.querySelectorAll(".mobile-dropdown");
    mobileDropdowns.forEach((el, idx) => {
      el.addEventListener(
        "click",
        (ev) => {
          if (ev.target instanceof HTMLAnchorElement) return;

          mobileDropdowns[idx].toggleAttribute("data-mobile-dropdown-open");
          mobileDropdowns.forEach((el2, idx2) => {
            if (idx !== idx2) {
              el2.removeAttribute("data-mobile-dropdown-open");
            }
          });
        },
        {}
      );
    });
  });
</script>
